AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        TABLE_NAME:
          Ref: ChatAppTable
Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: InvokeLambdas
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::GetAtt:
              - CreateConversationFunction
              - Arn
            - Fn::GetAtt:
              - SendMessageFunction
              - Arn
            - Fn::GetAtt:
              - GetConversationsFunction
              - Arn
            - Fn::GetAtt:
              - ConversationMessagesFunction
              - Arn
  QueryFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: QueryPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Query
            Resource:
              Fn::GetAtt:
              - ChatAppTable
              - Arn
      - PolicyName: LambdaCloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
  MutationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: MutationPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
            Resource:
              Fn::GetAtt:
              - ChatAppTable
              - Arn
      - PolicyName: LambdaCloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
  ChatGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: ChatAppApi
      AuthenticationType: API_KEY
  ChatGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      DefinitionS3Location: ..\..\schema.graphql
  ChatGraphQLApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      Expires: 1774459540
  CreateConversationDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      Name: CreateConversationDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn:
          Fn::GetAtt:
          - CreateConversationFunction
          - Arn
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
  SendMessageDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      Name: SendMessageDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn:
          Fn::GetAtt:
          - SendMessageFunction
          - Arn
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
  GetConversationsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      Name: GetConversationsDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn:
          Fn::GetAtt:
          - GetConversationsFunction
          - Arn
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
  ConversationMessagesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      Name: ConversationMessagesDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn:
          Fn::GetAtt:
          - ConversationMessagesFunction
          - Arn
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
  CreateConversationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      TypeName: Mutation
      FieldName: createConversation
      DataSourceName: CreateConversationDataSource
      RequestMappingTemplate: "{\n  \"version\": \"2018-05-29\",\n  \"operation\"\
        : \"Invoke\",\n  \"payload\": $util.toJson($context.arguments)\n}"
      ResponseMappingTemplate: $util.toJson($context.result)
    DependsOn: CreateConversationDataSource
  SendMessageResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      TypeName: Mutation
      FieldName: sendMessage
      DataSourceName: SendMessageDataSource
      RequestMappingTemplate: "{\n  \"version\": \"2018-05-29\",\n  \"operation\"\
        : \"Invoke\",\n  \"payload\": $util.toJson($context.arguments)\n}"
      ResponseMappingTemplate: $util.toJson($context.result)
    DependsOn: SendMessageDataSource
  GetConversationsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      TypeName: Query
      FieldName: conversations
      DataSourceName: GetConversationsDataSource
      RequestMappingTemplate: "{\n  \"version\": \"2018-05-29\",\n  \"operation\"\
        : \"Invoke\",\n  \"payload\": $util.toJson($context.arguments)\n}"
      ResponseMappingTemplate: $util.toJson($context.result)
    DependsOn: GetConversationsDataSource
  ConversationMessagesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - ChatGraphQLApi
        - ApiId
      TypeName: Query
      FieldName: conversationMessages
      DataSourceName: ConversationMessagesDataSource
      RequestMappingTemplate: "{\n  \"version\": \"2018-05-29\",\n  \"operation\"\
        : \"Invoke\",\n  \"payload\": $util.toJson($context.arguments)\n}"
      ResponseMappingTemplate: $util.toJson($context.result)
    DependsOn: ConversationMessagesDataSource
  ChatAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  SharedDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedDependencies
      ContentUri: ..\..\layers\shared-dependencies-layer
      CompatibleRuntimes:
      - nodejs18.x
  CreateConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateConversationFunction
      Handler: index.handler
      Layers:
      - Ref: SharedDependenciesLayer
      Role:
        Fn::GetAtt:
        - MutationFunctionRole
        - Arn
    Metadata:
      SamResourceId: CreateConversationFunction
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendMessageFunction
      Handler: index.handler
      Layers:
      - Ref: SharedDependenciesLayer
      Role:
        Fn::GetAtt:
        - MutationFunctionRole
        - Arn
    Metadata:
      SamResourceId: SendMessageFunction
  GetConversationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetConversationsFunction
      Handler: index.handler
      Layers:
      - Ref: SharedDependenciesLayer
      Role:
        Fn::GetAtt:
        - QueryFunctionRole
        - Arn
    Metadata:
      SamResourceId: GetConversationsFunction
  ConversationMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ConversationMessagesFunction
      Handler: index.handler
      Layers:
      - Ref: SharedDependenciesLayer
      Role:
        Fn::GetAtt:
        - QueryFunctionRole
        - Arn
    Metadata:
      SamResourceId: ConversationMessagesFunction
Outputs:
  GraphQLAPIURL:
    Description: The URL of the AppSync GraphQL API
    Value:
      Fn::GetAtt:
      - ChatGraphQLApi
      - GraphQLUrl
  APIKey:
    Description: The AppSync API Key
    Value:
      Fn::GetAtt:
      - ChatGraphQLApiKey
      - ApiKey
